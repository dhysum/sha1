**********************************************************************
*
* README for sec-hash--an implementation of the secure hash
*        algorithm (SHA1).
*
* Last Updated: December 2010
*
* AUTHOR  Jason S. Jones <jsjones96@gmail.com>
*
*       This project started as an academic exercise.  Basically, I
*       wanted to find an intermediate (practical) programming
*       challenge in order to explore the more advanced aspects of c.
*
*       Reference Federal Information Processing Standard 
*       Publications (FIPS PUBS) 180-1 and FIPS PUB 180-2 for
*       specification of the sha-1 hash function. FIPS PUBS
*       are issued by the National Institute of Standards and
*       Technology (NIST).
*
*  http://www.itl.nist.gov/fipspubs/fip180-1.htm
*  http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf
* 
**********************************************************************
*  FILE DESCRIPTIONS:
*
* README        - this file!
* makefile      - Makefile to build project
* tags          - tags file produced by ctags
*
**********************************************************************
*  DIR STRUCTURE
*
*     sec-hash/
*           |
*           --doc/
*           |
*           --include/
*           |
*           --lib/
*           |
*           --obj/
*           |
*           --src/
*           |
*           --tests/
*
* TODO:  describe the purpose for each directory
*
**********************************************************************
*
*  BUILD 
*
* To build the basic executable (without verbose output enabled), run:
*
*   :$ make 
*
*   - Without modification to the makefile, this will produce an
*     executable named 'sechash'.
*
* To build the executable with verbose output enabled, run:
*
*   :$ make test
*
*   - Without modification to the makefile, this will produce an
*     executable named 'sechash-gdb'.
*
*   - Running this program will produce a verbose ouput which
*     prints the components of the hash algorithm for each round.
*     This is good to see how things are working and to verify
*     the output against the examples listed in the appendix
*     of the specification.  Included in the 'tests' directory
*     are two files, one.txt and two.txt.  These files represent
*     the two of the three example cases located in the
*     specification for the sha-1 algorithm.
*
* To build and run the test suite located in the 'tests' directory,
* run:
*
*   :$ make
*   :$ make run-test
*
*   - 'make run-test' will execute the script in the tests directory
*     which will loop over all the .txt files locaed in the directory
*     and run the actual 'sha1sum' program and then run 'sechash'.
*     The message digests will be side-by-side (so to speak), so you
*     will be able to visually inspect the digest for correctness.
*
**********************************************************************
*
*  INSTALL 
*
* To install the executable in $(HOME)/bin, run:
*
*   :$ make install
*
*   - If you don't have a $(HOME)/bin directory or do not want to
*     install it, it can safely be run from the project
*     directory where it was built.
*
* To uninstall the executable, run:
*
*   :$ make uninstall
*
**********************************************************************
*
*  USAGE
*
*  To obtain a sha1 message digest for a particular file, run:
*
*   :$ sechash <filename>
*
*  To obtain a sha1 message digest for several files, run:
*
*   :$ sechash <filename1> <filename2> <filename3>
*
*   - For now, the output is sent to stdout.  Maybe a future update
*     will include the option to send the msg digest to another
*     output file.
*
**********************************************************************
*
*  COPYING/LICENSE
*
*
*
**********************************************************************
